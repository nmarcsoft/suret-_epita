module BinarySearch

  use import int.Int
  use import int.ComputerDivision
  use import ref.Ref
  use import array.Array
  use import option.Option
  
  predicate isin (a : array int) (v : int) = exists i:int. 0 <= i < length a /\ a[i] = v

  let binary_search (a : array int) (v : int)
    requires { ToDo }
    ensures  { if (isin a v) then ToDo else ToDo }
    =
    let ref l = 0 in
    let ref u = (length a - 1) in
    while l <= u do
        invariant { ToDo }
        let m = l + div (u - l) 2 in
        if a[m] < v then
            l := m + 1
        else if a[m] > v then
            u := m - 1
        else
            return Some m
    done;
      None
    end